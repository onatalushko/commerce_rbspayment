<?php

namespace Drupal\commerce_rbspayment\Plugin\Commerce\PaymentGateway;

use Drupal\commerce_order\Entity\OrderInterface;
use Drupal\commerce_payment\Entity\PaymentGatewayInterface;
use Drupal\commerce_payment\Plugin\Commerce\PaymentGateway\OffsitePaymentGatewayBase;
use Drupal\commerce_payment\Plugin\Commerce\PaymentGateway\OffsitePaymentGatewayInterface;
use Drupal\Core\Form\FormStateInterface;
use Symfony\Component\HttpFoundation\Request;

/**
 * Provides the Off-site RBS payment gateway.
 *
 * @CommercePaymentGateway(
 *   id = "rbs_payment",
 *   label = "RBS payment",
 *   display_label = "Bank Card",
 *   forms = {
 *     "offsite-payment" = "Drupal\commerce_rbspayment\PluginForm\OffsiteRedirect\PaymentOffsiteForm",
 *   },
 *   payment_method_types = {"credit_card"},
 *   credit_card_types = {
 *     "amex", "mir", "jcb", "unionpay", "mastercard", "visa",
 *   },
 * )
 */
class RbsPayment extends OffsitePaymentGatewayBase implements RbsPaymentInterface {

  /**
   * {@inheritdoc}
   */
  public function defaultConfiguration() {
    return [
//      'redirect_method' => 'post',
      'username' => '',
      'password' => '',
      'double_staged' => '',
      'server_url' => '',
      'server_test_url' => '',
      'timeout' => '',
      'logging' => '',
    ] + parent::defaultConfiguration();
  }

  /**
   * {@inheritdoc}
   */
  public function buildConfigurationForm(array $form, FormStateInterface $form_state) {
    $form = parent::buildConfigurationForm($form, $form_state);

//    // A real gateway would always know which redirect method should be used,
//    // it's made configurable here for test purposes.
//    $form['redirect_method'] = [
//      '#type' => 'radios',
//      '#title' => $this->t('Redirect method'),
//      '#options' => [
//        'get' => $this->t('Redirect via GET (302 header)'),
//        'post' => $this->t('Redirect via POST'),
//      ],
//      '#default_value' => $this->configuration['redirect_method'],
//    ];

    $form['username'] = [
      '#type' => 'textfield',
      '#title' => $this->t('Username'),
      '#default_value' => $this->configuration['username'],
    ];
    $form['password'] = [
      '#type' => 'textfield',
      '#title' => $this->t('Password'),
      '#default_value' => $this->configuration['password'],
    ];
// @todo Payment process capture?
//    $form['double_staged'] = [
//      '#type' => 'checkbox',
//      '#title' => $this->t('Double staged'),
//      '#default_value' => $this->configuration['double_staged'],
//    ];

//    define("TEST_URL", 'https://3dsec.sberbank.ru/testpayment/rest/');  //Тестовый шлюз
//    define("PROD_URL", 'https://3dsec.sberbank.ru/payment/rest/');  // Боевой шлюз

    $form['server_url'] = [
      '#type' => 'textfield',
      '#title' => $this->t('Server URL'),
      '#default_value' => $this->configuration['server_url'],
    ];

    $form['server_test_url'] = [
      '#type' => 'textfield',
      '#title' => $this->t('Server Test URL'),
      '#default_value' => $this->configuration['server_test_url'],
    ];

    $form['timeout'] = [
      '#type' => 'textfield',
      '#title' => $this->t('Timeout'),
      '#default_value' => $this->configuration['timeout'],
    ];

    $form['logging'] = [
      '#type' => 'checkbox',
      '#title' => $this->t('Logging'),
      '#default_value' => $this->configuration['logging'],
    ];

    return $form;
  }

  /**
   * {@inheritdoc}
   */
  public function submitConfigurationForm(array &$form, FormStateInterface $form_state) {
    parent::submitConfigurationForm($form, $form_state);
    if (!$form_state->getErrors()) {
      $values = $form_state->getValue($form['#parents']);
      $this->configuration['redirect_method'] = $values['redirect_method'];
      $this->configuration['username'] = $values['username'];
      if (!empty($values['password'])) {
        $this->configuration['password'] = $values['password'];
      }
      $this->configuration['server_url'] = $values['server_url'];
      $this->configuration['server_test_url'] = $values['server_test_url'];
      $this->configuration['timeout'] = $values['timeout'];
      $this->configuration['logging'] = $values['logging'];
    }
  }

  /**
   * {@inheritdoc}
   */
  public function onReturn(OrderInterface $order, Request $request) {
    // @todo Add examples of request validation.
    $payment_storage = $this->entityTypeManager->getStorage('commerce_payment');
    $payment = $payment_storage->create([
      'state' => 'authorization',
      'amount' => $order->getTotalPrice(),
      'payment_gateway' => $this->entityId,
      'order_id' => $order->id(),
      'remote_id' => $request->query->get('txn_id'),
      'remote_state' => $request->query->get('payment_status'),
    ]);
    $payment->save();
    drupal_set_message('Payment was processed');
  }

  /**
   * {@inheritdoc}
   */
  public function onNotify(Request $request) {
    parent::onNotify($request); // TODO: Change the autogenerated stub
  }

}
